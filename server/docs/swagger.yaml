basePath: /api/v1
consumes:
- application/json
definitions:
  entity.Genre:
    description: movie genre
    properties:
      genre:
        description: movie genre
        example: боевик
        type: string
    type: object
  entity.Movie:
    description: received data about movie
    properties:
      description:
        description: movie description
        example: 'Жизнь Томаса Андерсона разделена на две части: днём он — самый обычный
          офисный работник, получающий нагоняи от начальства, а ночью превращается
          в хакера по имени Нео, и нет места в сети, куда он бы не смог проникнуть.
          Но однажды всё меняется. Томас узнаёт ужасающую правду о реальности.'
        type: string
      genres:
        description: movie genres
        items:
          $ref: '#/definitions/entity.Genre'
        type: array
      id:
        description: movie uuid
        example: 0a54d171-7b07-41d1-bf5e-0ebe2b64b65a
        type: string
      imgURL:
        description: movie img URL
        example: https://kinopoiskapiunofficial.tech/images/posters/kp_small/301.jpg
        type: string
      kinopoiskID:
        description: movie kinopoisk ID
        example: 301
        type: integer
      movieLength:
        description: movie length
        example: "2:16"
        type: string
      rating:
        description: movie rating
        example: 8.5
        type: number
      staff:
        allOf:
        - $ref: '#/definitions/entity.MovieStaff'
        description: movie staff
      title:
        description: movie title
        example: Матрица
        type: string
      type:
        description: movie type (фильм, сериал, видео, мини-сериал)
        example: фильм
        type: string
      updatedAt:
        description: last movie data update from Kinopoisk API date (RFC3339 format)
        example: "2025-02-28T22:00:05.225526936Z"
        type: string
      webURL:
        description: link to the movie page on Kinopoisk
        example: https://www.kinopoisk.ru/film/301/
        type: string
      year:
        description: movie release year
        example: 1999
        type: integer
    type: object
  entity.MovieStaff:
    description: movie staff info
    properties:
      actors:
        description: movie actors (up to 30)
        items:
          $ref: '#/definitions/entity.Person'
        type: array
      directors:
        description: movie directors
        items:
          $ref: '#/definitions/entity.Person'
        type: array
    type: object
  entity.Person:
    description: one person info
    properties:
      id:
        description: person kinopoisk ID
        example: 7836
        type: integer
      imgUrl:
        description: person img URL
        example: https://st.kp.yandex.net/images/actor_iphone/iphone360_7836.jpg
        type: string
      name:
        description: person name
        example: Киану Ривз
        type: string
      role:
        description: person role (if person is actor)
        example: Neo
        type: string
    type: object
  entity.PersonFull:
    description: person full info
    properties:
      age:
        description: person age
        example: 62
        type: integer
      birthday:
        description: person birthday
        example: "1963-03-27"
        type: string
      death:
        description: person death date (can be not set)
        example: "1963-03-27"
        type: string
      facts:
        description: facts about person
        example:
        - Полное имя - Квентин Джером Тарантино.
        - Имеет двух сестёр и одного брата.
        items:
          type: string
        type: array
      id:
        description: person kinopoisk ID
        example: 7640
        type: integer
      imgURL:
        description: person img URL
        example: https://kinopoiskapiunofficial.tech/images/actor_posters/kp/7640.jpg
        type: string
      moviesActor:
        description: person movies in those he was an actor
        items:
          $ref: '#/definitions/entity.PersonFullMovie'
        type: array
      moviesDirector:
        description: person movies were directed by him
        items:
          $ref: '#/definitions/entity.PersonFullMovie'
        type: array
      name:
        description: person name
        example: Квентин Тарантино
        type: string
      profession:
        description: person profession
        example: Актер, Сценарист, Режиссер
        type: string
      sex:
        description: person sex
        example: мужской
        type: string
    type: object
  entity.PersonFullMovie:
    description: person movie for person full info
    properties:
      id:
        description: movie kinopoisk ID
        example: 342
        type: integer
      role:
        description: person role (if person is actor)
        example: Jimmie
        type: string
      title:
        description: movie title
        example: Криминальное чтиво
        type: string
    type: object
  entity.SearchedMovie:
    description: received movie data (for search movies)
    properties:
      genres:
        description: movie genres
        items:
          $ref: '#/definitions/entity.SearchedMovieGenre'
        type: array
      id:
        description: movie kinopoisk ID
        example: 301
        type: integer
      name:
        description: movie title
        example: Матрица
        type: string
      poster:
        allOf:
        - $ref: '#/definitions/entity.SearchedMoviePoster'
        description: movie poster
      rating:
        allOf:
        - $ref: '#/definitions/entity.SearchedMovieRating'
        description: movie rating
      type:
        description: movie type
        example: movie
        type: string
      year:
        description: movie release year
        example: 1999
        type: integer
    type: object
  entity.SearchedMovieGenre:
    description: movie genre (for search movies)
    properties:
      name:
        example: боевик
        type: string
    type: object
  entity.SearchedMoviePoster:
    description: movie poster URL (for search movies)
    properties:
      url:
        example: https://image.openmoviedb.com/kinopoisk-images/4774061/cf1970bc-3f08-4e0e-a095-2fb57c3aa7c6/orig
        type: string
    type: object
  entity.SearchedMovieRating:
    description: movie rating (for search movies)
    properties:
      kp:
        example: 8.498
        type: number
    type: object
  entity.SearchedMovies:
    description: received data (for search movies)
    properties:
      docs:
        description: movie info
        items:
          $ref: '#/definitions/entity.SearchedMovie'
        type: array
      limit:
        description: movies amount per page
        example: 25
        type: integer
      page:
        description: page number
        example: 1
        type: integer
      pages:
        description: all pages amount
        example: 12
        type: integer
      query:
        description: keyword
        example: матрица
        type: string
      total:
        description: total movies found
        example: 300
        type: integer
    type: object
  entity.User:
    description: user model
    properties:
      email:
        description: user email
        example: user@gmail.com
        type: string
    type: object
  entity.UserActivity:
    description: received data about one user activity (for admin-panel)
    properties:
      createdAt:
        description: create user datetime (RFC3339 format)
        example: "2025-02-02T22:00:07.225526936Z"
        type: string
      email:
        description: user email
        example: user@gmail.com
        type: string
      stared:
        description: stared user movies
        example: 5
        type: integer
      want:
        description: user movies in "want" list
        example: 25
        type: integer
      watched:
        description: user movies in "watched" list
        example: 50
        type: integer
    type: object
  entity.UserMovie:
    description: user movie received data
    properties:
      movie:
        $ref: '#/definitions/entity.Movie'
      stared:
        description: movie star
        example: true
        type: boolean
      status:
        description: movie list (0 - nothing, 1 - want, 2 - watched)
        example: 1
        type: integer
    type: object
  entity.UserMoviesFilter:
    properties:
      genres:
        items:
          type: string
        type: array
      ratingFrom:
        minimum: 0
        type: number
      title:
        maxLength: 20
        type: string
      type:
        enum:
        - фильм
        - сериал
        - видео
        - мини-сериал
        type: string
      yearFrom:
        maximum: 3000
        minimum: 1500
        type: integer
      yearTo:
        maximum: 3000
        minimum: 1500
        type: integer
    type: object
  entity.UserMoviesPagination:
    properties:
      limit:
        type: integer
      page:
        minimum: 1
        type: integer
      pages:
        type: integer
      total:
        type: integer
    type: object
  entity.UserMoviesSort:
    properties:
      sortField:
        enum:
        - title
        - rating
        - year
        - updated_at
        type: string
      sortOrder:
        enum:
        - asc
        - desc
        type: string
    type: object
  entity.UserMoviesWithCategory:
    properties:
      filter:
        allOf:
        - $ref: '#/definitions/entity.UserMoviesFilter'
        description: filter fields
      movies:
        description: found movies list
        items:
          $ref: '#/definitions/entity.UserMovie'
        type: array
      pagination:
        allOf:
        - $ref: '#/definitions/entity.UserMoviesPagination'
        description: pagination
      sort:
        allOf:
        - $ref: '#/definitions/entity.UserMoviesSort'
        description: sort by field
    type: object
  entity.UserWithToken:
    description: received data about user with token
    properties:
      accessToken:
        description: access token, generated after success auth
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3NDA3NjA0MzIsInVzZXJJRCI6IjU4MzU0ZGJhLWUyY2MtNDI4My04MjAxLWNjZGRiZTkzOGExNSJ9.VwA9d9lao0Xgl5c3H9VNM8JVtUKDs47YEItb6MZlkCw
        type: string
      user:
        allOf:
        - $ref: '#/definitions/entity.User'
        description: user data
    type: object
  http.authIn:
    description: data for sign up OR login user
    properties:
      email:
        description: user email
        example: user@gmail.com
        maxLength: 100
        type: string
      password:
        description: user password
        example: qwerty123
        maxLength: 40
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  http.changePasswordIn:
    description: data for change user password
    properties:
      currentPassword:
        description: current password
        example: qwerty123
        maxLength: 40
        minLength: 8
        type: string
      newPassword:
        description: new password
        example: 123qwerty
        maxLength: 40
        minLength: 8
        type: string
    required:
    - currentPassword
    - newPassword
    type: object
host: 127.0.0.1:3000
info:
  contact: {}
  description: This is a Filmer API for Kinopoisk API and DB
  license:
    name: MIT Licence
    url: https://github.com/ej-you/Filmer/blob/master/LICENCE
  title: Filmer API
  version: 1.0.0
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Вход для существующего юзера по почте и паролю
      operationId: auth-login
      parameters:
      - description: authIn
        in: body
        name: authIn
        required: true
        schema:
          $ref: '#/definitions/http.authIn'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.UserWithToken'
        "401":
          description: Неверный пароль для учетной записи юзера
        "404":
          description: Юзер с введенной почтой не найден
      summary: Вход для юзера
      tags:
      - auth
  /auth/logout:
    post:
      description: Выход юзера (помещение JWT-token'а текущей сессии юзера в черный
        список)
      operationId: auth-logout
      responses:
        "204":
          description: No Content
        "401":
          description: Пустой или неправильный токен
        "403":
          description: Истекший или невалидный токен
      security:
      - JWT: []
      summary: Выход юзера
      tags:
      - auth
  /auth/sign-up:
    post:
      consumes:
      - application/json
      description: Регистрация нового юзера с почтой и паролем
      operationId: auth-sign-up
      parameters:
      - description: authIn
        in: body
        name: authIn
        required: true
        schema:
          $ref: '#/definitions/http.authIn'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entity.UserWithToken'
        "409":
          description: Юзер с введенной почтой уже зарегистрирован
      summary: Регистрация юзера
      tags:
      - auth
  /films/{movieID}/clear:
    post:
      description: Удаление фильма юзера из списков "хочу посмотреть" и "посмотрел"
        по ID фильма
      operationId: films-set-clear
      parameters:
      - description: ID фильма
        in: path
        name: movieID
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.UserMovie'
        "401":
          description: Пустой или неправильный токен
        "403":
          description: Истекший или невалидный токен
        "404":
          description: Фильм не найден
      security:
      - JWT: []
      summary: Удаление фильма юзера из списков "хочу посмотреть" и "посмотрел"
      tags:
      - user-movie
  /films/{movieID}/star:
    post:
      description: Добавление фильма юзера в избранное по ID фильма
      operationId: films-set-star
      parameters:
      - description: ID фильма
        in: path
        name: movieID
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.UserMovie'
        "401":
          description: Пустой или неправильный токен
        "403":
          description: Истекший или невалидный токен
        "404":
          description: Фильм не найден
      security:
      - JWT: []
      summary: Добавление фильма юзера в избранное
      tags:
      - user-movie
  /films/{movieID}/unstar:
    post:
      description: Удаление фильма юзера из избранного по ID фильма
      operationId: films-set-unstar
      parameters:
      - description: ID фильма
        in: path
        name: movieID
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.UserMovie'
        "401":
          description: Пустой или неправильный токен
        "403":
          description: Истекший или невалидный токен
        "404":
          description: Фильм не найден
      security:
      - JWT: []
      summary: Удаление фильма юзера из избранного
      tags:
      - user-movie
  /films/{movieID}/want:
    post:
      description: Добавление фильма юзера в список "хочу посмотреть" по ID фильма
      operationId: films-set-want
      parameters:
      - description: ID фильма
        in: path
        name: movieID
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.UserMovie'
        "401":
          description: Пустой или неправильный токен
        "403":
          description: Истекший или невалидный токен
        "404":
          description: Фильм не найден
      security:
      - JWT: []
      summary: Добавление фильма юзера в список "хочу посмотреть"
      tags:
      - user-movie
  /films/{movieID}/watched:
    post:
      description: Добавление фильма юзера в список "посмотрел" по ID фильма
      operationId: films-set-watched
      parameters:
      - description: ID фильма
        in: path
        name: movieID
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.UserMovie'
        "401":
          description: Пустой или неправильный токен
        "403":
          description: Истекший или невалидный токен
        "404":
          description: Фильм не найден
      security:
      - JWT: []
      summary: Добавление фильма юзера в список "посмотрел"
      tags:
      - user-movie
  /films/full-info/{kinopoiskID}:
    get:
      description: Получение информации о фильме по его kinopoisk ID
      operationId: kinopoisk-get-film-info
      parameters:
      - description: kinopoisk ID фильма
        in: path
        name: kinopoiskID
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.UserMovie'
        "401":
          description: Пустой или неправильный токен
        "402":
          description: Превышен дневной лимит запросов к Kinopoisk API
        "403":
          description: Истекший или невалидный токен
        "404":
          description: Фильм не найден
        "429":
          description: Слишком много запросов. Лимит 5 запросов в секунду
      security:
      - JWT: []
      summary: Получение информации о фильме
      tags:
      - user-movie
  /films/stared:
    get:
      description: Получение избранных фильмов юзера с пагинацией и настраиваемой
        сортировкой и фильтрацией
      operationId: films-get-stared
      parameters:
      - description: 'страница поиска (Например: 1)'
        in: query
        name: page
        type: integer
      - description: 'поле для сортировки (Например: year | По умолчанию: updated_at
          | Допустимые значения: title, rating, year, updated_at)'
        in: query
        name: sortField
        type: string
      - description: 'направление сортировки (Например: desc | По умолчанию: asc [для
          updated_at: desc] | Допустимые значения: asc, desc)'
        in: query
        name: sortOrder
        type: string
      - description: 'подстрока названия фильма (Например: гнев | Допустимая длина:
          до 20 символов)'
        in: query
        name: title
        type: string
      - description: 'минимальный рейтинг (Например: 7.5 | Допустимые значения: 0
          и больше)'
        in: query
        name: ratingFrom
        type: number
      - description: 'минимальный год (Например: 1991 | Допустимые значения: 1500..3000)'
        in: query
        name: yearFrom
        type: integer
      - description: 'максимальный год (Например: 2014 | Допустимые значения: 1500..3000)'
        in: query
        name: yearTo
        type: integer
      - description: 'тип фильма (Например: сериал | Допустимые значения: фильм, сериал,
          видео, мини-сериал)'
        in: query
        name: type
        type: string
      - collectionFormat: multi
        description: 'жанры фильмов (Например: боевик)'
        in: query
        items:
          type: string
        name: genres
        type: array
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.UserMoviesWithCategory'
        "401":
          description: Пустой или неправильный токен
        "403":
          description: Истекший или невалидный токен
      security:
      - JWT: []
      summary: Получение избранных фильмов юзера
      tags:
      - user-movie
  /films/want:
    get:
      description: Получение фильмов юзера из списка "хочу посмотреть" с пагинацией
        и настраиваемой сортировкой и фильтрацией
      operationId: films-get-want
      parameters:
      - description: 'страница поиска (Например: 1)'
        in: query
        name: page
        type: integer
      - description: 'поле для сортировки (Например: year | По умолчанию: updated_at
          | Допустимые значения: title, rating, year, updated_at)'
        in: query
        name: sortField
        type: string
      - description: 'направление сортировки (Например: desc | По умолчанию: asc [для
          updated_at: desc] | Допустимые значения: asc, desc)'
        in: query
        name: sortOrder
        type: string
      - description: 'подстрока названия фильма (Например: гнев | Допустимая длина:
          до 20 символов)'
        in: query
        name: title
        type: string
      - description: 'минимальный рейтинг (Например: 7.5 | Допустимые значения: 0
          и больше)'
        in: query
        name: ratingFrom
        type: number
      - description: 'минимальный год (Например: 1991 | Допустимые значения: 1500..3000)'
        in: query
        name: yearFrom
        type: integer
      - description: 'максимальный год (Например: 2014 | Допустимые значения: 1500..3000)'
        in: query
        name: yearTo
        type: integer
      - description: 'тип фильма (Например: сериал | Допустимые значения: фильм, сериал,
          видео, мини-сериал)'
        in: query
        name: type
        type: string
      - collectionFormat: multi
        description: 'жанры фильмов (Например: боевик)'
        in: query
        items:
          type: string
        name: genres
        type: array
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.UserMoviesWithCategory'
        "401":
          description: Пустой или неправильный токен
        "403":
          description: Истекший или невалидный токен
      security:
      - JWT: []
      summary: Получение фильмов юзера из списка "хочу посмотреть"
      tags:
      - user-movie
  /films/watched:
    get:
      description: Получение фильмов юзера из списка "посмотрел" с пагинацией и настраиваемой
        сортировкой и фильтрацией
      operationId: films-get-watched
      parameters:
      - description: 'страница поиска (Например: 1)'
        in: query
        name: page
        type: integer
      - description: 'поле для сортировки (Например: year | По умолчанию: updated_at
          | Допустимые значения: title, rating, year, updated_at)'
        in: query
        name: sortField
        type: string
      - description: 'направление сортировки (Например: desc | По умолчанию: asc [для
          updated_at: desc] | Допустимые значения: asc, desc)'
        in: query
        name: sortOrder
        type: string
      - description: 'подстрока названия фильма (Например: гнев | Допустимая длина:
          до 20 символов)'
        in: query
        name: title
        type: string
      - description: 'минимальный рейтинг (Например: 7.5 | Допустимые значения: 0
          и больше)'
        in: query
        name: ratingFrom
        type: number
      - description: 'минимальный год (Например: 1991 | Допустимые значения: 1500..3000)'
        in: query
        name: yearFrom
        type: integer
      - description: 'максимальный год (Например: 2014 | Допустимые значения: 1500..3000)'
        in: query
        name: yearTo
        type: integer
      - description: 'тип фильма (Например: сериал | Допустимые значения: фильм, сериал,
          видео, мини-сериал)'
        in: query
        name: type
        type: string
      - collectionFormat: multi
        description: 'жанры фильмов (Например: боевик)'
        in: query
        items:
          type: string
        name: genres
        type: array
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.UserMoviesWithCategory'
        "401":
          description: Пустой или неправильный токен
        "403":
          description: Истекший или невалидный токен
      security:
      - JWT: []
      summary: Получение фильмов юзера из списка "посмотрел"
      tags:
      - user-movie
  /kinopoisk/films/search:
    get:
      description: Поиск фильмов по ключевому слову с пагинацией
      operationId: kinopoisk-search-films
      parameters:
      - description: 'ключевое слово (Например: матрица)'
        in: query
        name: q
        required: true
        type: string
      - description: 'страница поиска (Например: 1)'
        in: query
        name: page
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.SearchedMovies'
        "401":
          description: Пустой или неправильный токен
        "402":
          description: Превышен дневной лимит запросов к Kinopoisk API
        "403":
          description: Истекший или невалидный токен
        "404":
          description: Фильмы не найдены
        "429":
          description: Слишком много запросов. Лимит 5 запросов в секунду
      security:
      - JWT: []
      summary: Поиск фильмов
      tags:
      - movie
  /staff/full-info/{personID}:
    get:
      description: Получение информации о личности по её ID
      operationId: kinopoisk-get-staff-info
      parameters:
      - description: ID личности
        in: path
        name: personID
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.PersonFull'
        "401":
          description: Пустой или неправильный токен
        "402":
          description: Превышен дневной лимит запросов к Kinopoisk API
        "403":
          description: Истекший или невалидный токен
        "404":
          description: Личность не найдена
        "429":
          description: Слишком много запросов. Лимит 5 запросов в секунду
      security:
      - JWT: []
      summary: Получение информации о личности
      tags:
      - staff
  /user/all/activity:
    get:
      description: Получение для каждого юзера количества фильмов в категориях "избранное",
        "хочу посмотреть" и "поcмотрел"
      operationId: user-all-activity
      responses:
        "200":
          description: OK
          schema:
            description: received data about all users activity
            items:
              $ref: '#/definitions/entity.UserActivity'
            type: array
      summary: Получение активности юзеров
      tags:
      - user
  /user/change-password:
    post:
      description: Установка нового пароля юзеру с подтверждением через старый пароль
      operationId: user-change-password
      parameters:
      - description: changePasswordIn
        in: body
        name: changePasswordIn
        required: true
        schema:
          $ref: '#/definitions/http.changePasswordIn'
      responses:
        "204":
          description: No Content
        "400":
          description: Неверный пароль
        "401":
          description: Пустой или неправильный токен
        "403":
          description: Истекший или невалидный токен
        "404":
          description: Текущий юзер не найден
      security:
      - JWT: []
      summary: Смена пароля юзера
      tags:
      - user
produces:
- application/json
schemes:
- http
securityDefinitions:
  JWT:
    description: JWT security accessToken. Please, add it in the format "Bearer {AccessToken}"
      to authorize your requests.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
