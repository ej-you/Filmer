// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package repository

import (
	entity "Filmer/server/internal/app/entity"
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson940b52a5DecodeFilmerServerInternalAppMovieRepository(in *jlexer.Lexer, out *rawMovieStaff) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(rawMovieStaff, 0, 0)
			} else {
				*out = rawMovieStaff{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 rawMoviePerson
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson940b52a5EncodeFilmerServerInternalAppMovieRepository(out *jwriter.Writer, in rawMovieStaff) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v rawMovieStaff) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson940b52a5EncodeFilmerServerInternalAppMovieRepository(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v rawMovieStaff) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson940b52a5EncodeFilmerServerInternalAppMovieRepository(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *rawMovieStaff) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson940b52a5DecodeFilmerServerInternalAppMovieRepository(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *rawMovieStaff) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson940b52a5DecodeFilmerServerInternalAppMovieRepository(l, v)
}
func easyjson940b52a5DecodeFilmerServerInternalAppMovieRepository1(in *jlexer.Lexer, out *rawMoviePerson) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "staffId":
			out.StaffID = int(in.Int())
		case "nameRu":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "professionKey":
			out.ProfessionKey = string(in.String())
		case "posterUrl":
			out.ImgURL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson940b52a5EncodeFilmerServerInternalAppMovieRepository1(out *jwriter.Writer, in rawMoviePerson) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"staffId\":"
		out.RawString(prefix[1:])
		out.Int(int(in.StaffID))
	}
	{
		const prefix string = ",\"nameRu\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"professionKey\":"
		out.RawString(prefix)
		out.String(string(in.ProfessionKey))
	}
	{
		const prefix string = ",\"posterUrl\":"
		out.RawString(prefix)
		out.String(string(in.ImgURL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v rawMoviePerson) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson940b52a5EncodeFilmerServerInternalAppMovieRepository1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v rawMoviePerson) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson940b52a5EncodeFilmerServerInternalAppMovieRepository1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *rawMoviePerson) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson940b52a5DecodeFilmerServerInternalAppMovieRepository1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *rawMoviePerson) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson940b52a5DecodeFilmerServerInternalAppMovieRepository1(l, v)
}
func easyjson940b52a5DecodeFilmerServerInternalAppMovieRepository2(in *jlexer.Lexer, out *rawMovie) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "kinopoiskId":
			out.KinopoiskID = int(in.Int())
		case "nameRu":
			out.Title = string(in.String())
		case "posterUrlPreview":
			out.PosterURL = string(in.String())
		case "webUrl":
			out.WebURL = string(in.String())
		case "ratingKinopoisk":
			out.RatingKinopoisk = float64(in.Float64())
		case "year":
			out.Year = int(in.Int())
		case "filmLength":
			out.FilmLenMinutes = int(in.Int())
		case "description":
			out.Description = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "genres":
			if in.IsNull() {
				in.Skip()
				out.Genres = nil
			} else {
				in.Delim('[')
				if out.Genres == nil {
					if !in.IsDelim(']') {
						out.Genres = make([]entity.Genre, 0, 0)
					} else {
						out.Genres = []entity.Genre{}
					}
				} else {
					out.Genres = (out.Genres)[:0]
				}
				for !in.IsDelim(']') {
					var v4 entity.Genre
					(v4).UnmarshalEasyJSON(in)
					out.Genres = append(out.Genres, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson940b52a5EncodeFilmerServerInternalAppMovieRepository2(out *jwriter.Writer, in rawMovie) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"kinopoiskId\":"
		out.RawString(prefix[1:])
		out.Int(int(in.KinopoiskID))
	}
	{
		const prefix string = ",\"nameRu\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"posterUrlPreview\":"
		out.RawString(prefix)
		out.String(string(in.PosterURL))
	}
	{
		const prefix string = ",\"webUrl\":"
		out.RawString(prefix)
		out.String(string(in.WebURL))
	}
	{
		const prefix string = ",\"ratingKinopoisk\":"
		out.RawString(prefix)
		out.Float64(float64(in.RatingKinopoisk))
	}
	{
		const prefix string = ",\"year\":"
		out.RawString(prefix)
		out.Int(int(in.Year))
	}
	{
		const prefix string = ",\"filmLength\":"
		out.RawString(prefix)
		out.Int(int(in.FilmLenMinutes))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"genres\":"
		out.RawString(prefix)
		if in.Genres == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Genres {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v rawMovie) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson940b52a5EncodeFilmerServerInternalAppMovieRepository2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v rawMovie) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson940b52a5EncodeFilmerServerInternalAppMovieRepository2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *rawMovie) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson940b52a5DecodeFilmerServerInternalAppMovieRepository2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *rawMovie) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson940b52a5DecodeFilmerServerInternalAppMovieRepository2(l, v)
}
