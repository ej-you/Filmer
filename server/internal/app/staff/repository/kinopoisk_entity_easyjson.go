// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package repository

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson940b52a5DecodeFilmerServerInternalAppStaffRepository(in *jlexer.Lexer, out *rawPersonFullMovie) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "filmId":
			out.ID = int(in.Int())
		case "nameRu":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "rating":
			out.Rating = string(in.String())
		case "professionKey":
			out.ProfessionKey = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson940b52a5EncodeFilmerServerInternalAppStaffRepository(out *jwriter.Writer, in rawPersonFullMovie) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"filmId\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"nameRu\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix)
		out.String(string(in.Rating))
	}
	{
		const prefix string = ",\"professionKey\":"
		out.RawString(prefix)
		out.String(string(in.ProfessionKey))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v rawPersonFullMovie) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson940b52a5EncodeFilmerServerInternalAppStaffRepository(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v rawPersonFullMovie) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson940b52a5EncodeFilmerServerInternalAppStaffRepository(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *rawPersonFullMovie) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson940b52a5DecodeFilmerServerInternalAppStaffRepository(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *rawPersonFullMovie) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson940b52a5DecodeFilmerServerInternalAppStaffRepository(l, v)
}
func easyjson940b52a5DecodeFilmerServerInternalAppStaffRepository1(in *jlexer.Lexer, out *rawPersonFull) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "personId":
			out.PersonID = int(in.Int())
		case "nameRu":
			out.Name = string(in.String())
		case "posterUrl":
			out.ImgURL = string(in.String())
		case "sex":
			out.Sex = string(in.String())
		case "profession":
			out.Profession = string(in.String())
		case "age":
			out.Age = int(in.Int())
		case "birthday":
			out.Birthday = string(in.String())
		case "death":
			out.Death = string(in.String())
		case "facts":
			if in.IsNull() {
				in.Skip()
				out.Facts = nil
			} else {
				in.Delim('[')
				if out.Facts == nil {
					if !in.IsDelim(']') {
						out.Facts = make([]string, 0, 4)
					} else {
						out.Facts = []string{}
					}
				} else {
					out.Facts = (out.Facts)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Facts = append(out.Facts, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "films":
			if in.IsNull() {
				in.Skip()
				out.Movies = nil
			} else {
				in.Delim('[')
				if out.Movies == nil {
					if !in.IsDelim(']') {
						out.Movies = make([]rawPersonFullMovie, 0, 0)
					} else {
						out.Movies = []rawPersonFullMovie{}
					}
				} else {
					out.Movies = (out.Movies)[:0]
				}
				for !in.IsDelim(']') {
					var v2 rawPersonFullMovie
					(v2).UnmarshalEasyJSON(in)
					out.Movies = append(out.Movies, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson940b52a5EncodeFilmerServerInternalAppStaffRepository1(out *jwriter.Writer, in rawPersonFull) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"personId\":"
		out.RawString(prefix[1:])
		out.Int(int(in.PersonID))
	}
	{
		const prefix string = ",\"nameRu\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"posterUrl\":"
		out.RawString(prefix)
		out.String(string(in.ImgURL))
	}
	{
		const prefix string = ",\"sex\":"
		out.RawString(prefix)
		out.String(string(in.Sex))
	}
	{
		const prefix string = ",\"profession\":"
		out.RawString(prefix)
		out.String(string(in.Profession))
	}
	{
		const prefix string = ",\"age\":"
		out.RawString(prefix)
		out.Int(int(in.Age))
	}
	{
		const prefix string = ",\"birthday\":"
		out.RawString(prefix)
		out.String(string(in.Birthday))
	}
	if in.Death != "" {
		const prefix string = ",\"death\":"
		out.RawString(prefix)
		out.String(string(in.Death))
	}
	{
		const prefix string = ",\"facts\":"
		out.RawString(prefix)
		if in.Facts == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.Facts {
				if v3 > 0 {
					out.RawByte(',')
				}
				out.String(string(v4))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"films\":"
		out.RawString(prefix)
		if in.Movies == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Movies {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v rawPersonFull) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson940b52a5EncodeFilmerServerInternalAppStaffRepository1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v rawPersonFull) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson940b52a5EncodeFilmerServerInternalAppStaffRepository1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *rawPersonFull) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson940b52a5DecodeFilmerServerInternalAppStaffRepository1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *rawPersonFull) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson940b52a5DecodeFilmerServerInternalAppStaffRepository1(l, v)
}
