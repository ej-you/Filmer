// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package http

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson8e1dc130DecodeFilmerServerInternalAppUsermovieDeliveryHttp(in *jlexer.Lexer, out *setFilmCategoryIn) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "MovieID":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.MovieID).UnmarshalText(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e1dc130EncodeFilmerServerInternalAppUsermovieDeliveryHttp(out *jwriter.Writer, in setFilmCategoryIn) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"MovieID\":"
		out.RawString(prefix[1:])
		out.RawText((in.MovieID).MarshalText())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v setFilmCategoryIn) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e1dc130EncodeFilmerServerInternalAppUsermovieDeliveryHttp(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v setFilmCategoryIn) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e1dc130EncodeFilmerServerInternalAppUsermovieDeliveryHttp(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *setFilmCategoryIn) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e1dc130DecodeFilmerServerInternalAppUsermovieDeliveryHttp(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *setFilmCategoryIn) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e1dc130DecodeFilmerServerInternalAppUsermovieDeliveryHttp(l, v)
}
func easyjson8e1dc130DecodeFilmerServerInternalAppUsermovieDeliveryHttp1(in *jlexer.Lexer, out *getFilmInfoIn) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "KinopoiskID":
			out.KinopoiskID = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e1dc130EncodeFilmerServerInternalAppUsermovieDeliveryHttp1(out *jwriter.Writer, in getFilmInfoIn) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"KinopoiskID\":"
		out.RawString(prefix[1:])
		out.Int(int(in.KinopoiskID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v getFilmInfoIn) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e1dc130EncodeFilmerServerInternalAppUsermovieDeliveryHttp1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v getFilmInfoIn) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e1dc130EncodeFilmerServerInternalAppUsermovieDeliveryHttp1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *getFilmInfoIn) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e1dc130DecodeFilmerServerInternalAppUsermovieDeliveryHttp1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *getFilmInfoIn) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e1dc130DecodeFilmerServerInternalAppUsermovieDeliveryHttp1(l, v)
}
func easyjson8e1dc130DecodeFilmerServerInternalAppUsermovieDeliveryHttp2(in *jlexer.Lexer, out *categoryFilmsIn) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "page":
			out.Page = int(in.Int())
		case "pages":
			out.Pages = int(in.Int())
		case "total":
			out.Total = int64(in.Int64())
		case "limit":
			out.Limit = int(in.Int())
		case "sortField":
			out.SortField = string(in.String())
		case "sortOrder":
			out.SortOrder = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "ratingFrom":
			if in.IsNull() {
				in.Skip()
				out.RatingFrom = nil
			} else {
				if out.RatingFrom == nil {
					out.RatingFrom = new(float64)
				}
				*out.RatingFrom = float64(in.Float64())
			}
		case "yearFrom":
			out.YearFrom = int(in.Int())
		case "yearTo":
			out.YearTo = int(in.Int())
		case "type":
			out.Type = string(in.String())
		case "genres":
			if in.IsNull() {
				in.Skip()
				out.Genres = nil
			} else {
				in.Delim('[')
				if out.Genres == nil {
					if !in.IsDelim(']') {
						out.Genres = make([]string, 0, 4)
					} else {
						out.Genres = []string{}
					}
				} else {
					out.Genres = (out.Genres)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Genres = append(out.Genres, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e1dc130EncodeFilmerServerInternalAppUsermovieDeliveryHttp2(out *jwriter.Writer, in categoryFilmsIn) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"page\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Page))
	}
	{
		const prefix string = ",\"pages\":"
		out.RawString(prefix)
		out.Int(int(in.Pages))
	}
	{
		const prefix string = ",\"total\":"
		out.RawString(prefix)
		out.Int64(int64(in.Total))
	}
	{
		const prefix string = ",\"limit\":"
		out.RawString(prefix)
		out.Int(int(in.Limit))
	}
	if in.SortField != "" {
		const prefix string = ",\"sortField\":"
		out.RawString(prefix)
		out.String(string(in.SortField))
	}
	if in.SortOrder != "" {
		const prefix string = ",\"sortOrder\":"
		out.RawString(prefix)
		out.String(string(in.SortOrder))
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	if in.RatingFrom != nil {
		const prefix string = ",\"ratingFrom\":"
		out.RawString(prefix)
		out.Float64(float64(*in.RatingFrom))
	}
	if in.YearFrom != 0 {
		const prefix string = ",\"yearFrom\":"
		out.RawString(prefix)
		out.Int(int(in.YearFrom))
	}
	if in.YearTo != 0 {
		const prefix string = ",\"yearTo\":"
		out.RawString(prefix)
		out.Int(int(in.YearTo))
	}
	if in.Type != "" {
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	if len(in.Genres) != 0 {
		const prefix string = ",\"genres\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v2, v3 := range in.Genres {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v categoryFilmsIn) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e1dc130EncodeFilmerServerInternalAppUsermovieDeliveryHttp2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v categoryFilmsIn) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e1dc130EncodeFilmerServerInternalAppUsermovieDeliveryHttp2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *categoryFilmsIn) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e1dc130DecodeFilmerServerInternalAppUsermovieDeliveryHttp2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *categoryFilmsIn) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e1dc130DecodeFilmerServerInternalAppUsermovieDeliveryHttp2(l, v)
}
